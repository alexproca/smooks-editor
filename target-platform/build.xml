<project default="build.local.target.platform.repo" name="jbosstools target platform p2.mirror generator - ant script for Hudson">
	<property name="targetFile" value="multiple.target" />

	<!-- if useLatest = true, omit versions from p2.mirror script to fetch latest version available; 
		 if useLatest = false, include versions and fetch specific versions requested. -->
	<property name="useLatest" value="true" />

	<property name="tmpdir" value="${java.io.tmpdir}/target-platform-build" />

	<condition property="WORKINGDIR" value="/home/hudson/static_build_env/jbds/tools/sources" else="${basedir}">
		<available file="/home/hudson/static_build_env/jbds" type="dir" />
	</condition>
	<mkdir dir="${WORKINGDIR}" />

	<condition property="COMMON_TOOLS" value="/home/hudson/static_build_env/jbds/tools" else="${java.io.tmpdir}">
		<available file="/home/hudson/static_build_env/jbds" type="dir" />
	</condition>
	<mkdir dir="${COMMON_TOOLS}" />

	<condition property="build.xml" value="/home/hudson/static_build_env/jbds/tools/sources/build/build.xml">
		<available file="/home/hudson/static_build_env/jbds/tools/sources/build/build.xml" type="file" />
	</condition>
	<condition property="build.xml" value="${basedir}/../../build/build.xml">
		<available file="${basedir}/../../build/build.xml" type="file" />
	</condition>
	<condition property="build.xml" value="${basedir}/../../build.xml">
		<available file="${basedir}/../../build.xml" type="file" />
	</condition>
	<condition property="build.xml" value="${basedir}/../../sources/build.xml">
		<available file="${basedir}/../../sources/build.xml" type="file" />
	</condition>
	<condition property="build.xml" value="${basedir}/../build.xml">
		<available file="${basedir}/../build.xml" type="file" />
	</condition>
	<!-- if can't calculate where build/build.xml is located, must pass in path from parent when calling this script -->

	<property name="repoDir" value="${WORKINGDIR}/REPO" />

	<!-- ********************************************************************************** -->

	<target name="help">
		<echo>This script, if run in its entirety, will:
			
	a) download features, plugins, binaries, and metadata from the site(s) specified
		in a given target platform, and create a local p2 repo
	b) generate a local.target file, which points at the generated local p2 repo

After running this script, publish this pom and *.target files to your local ~/.m2 repo:
	mvn clean install -f .../target-platform/pom.xml -P use.local.target
			
Then you can then refer to it in downstream builds using:
		mvn install -P local.target

------------------
			
Default target is:

	* build.local.target.platform.repo

Can also attempt to:

	* install.local.target.platform.repo

There are also integration tests (will build JBT using platform repo or platform installed base):

	* test.local.target.platform.repo
	* test.local.target.platform.installed.base (deprecated)

Thus, default operation is this (if run w/ these options or NO options):

	$ ant -DtargetFile=multiple.target build.local.target.platform.repo

To run for JBDS target file instead of JBT target files, pass in alternate target file and resulting repo path:

	$ ant -DtargetFile=jbds.target -DrepoDir=${WORKINGDIR}/JBDS_REPO/

Or, simply call the jbds target, to use the defaults in the previous example:

	$ ant jbds
</echo>
	</target>


	<!-- do everything but tests -->
	<target name="all" depends="install" />

	<target name="tests" depends="install, test.local.target.platform.repo" />

	<!-- to install from the target platform repo, first build the repo, then install using p2.director -->
	<target name="install" depends="build.local.target.platform.repo, install.local.target.platform.repo" />

	<target name="jbds" description="default local build of jbds.target in ./JBDS_REPO/" depends="init">
		<var name="targetFile" unset="true" />
		<var name="targetFile" value="jbds.target" />
		<var name="repoDir" unset="true" />
		<var name="repoDir" value="${WORKINGDIR}/JBDS_REPO" />
		<antcall target="build.local.target.platform.repo" />
	</target>

	<target name="build.local.target.platform.repo" depends="init, get.arch, get.eclipse, gen.p2mirror.script, run.p2mirror.script, update.target.file, cleanup" />

	<!-- ********************************************************************************** -->

	<target name="init">
		<ant antfile="${build.xml}" target="init" />
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${COMMON_TOOLS}/ant-contrib.jar" />
			</classpath>
		</taskdef>
	</target>

	<target name="get.arch">
		<condition property="ext" value="tar.gz" else="zip">
			<os family="unix" />
		</condition>
		<condition property="os1" value="linux-gtk" else="win32">
			<os family="unix" />
		</condition>
		<condition property="os" value="macosx-cocoa" else="${os1}">
			<os family="mac" />
		</condition>
		<if>
			<os family="unix" />
			<then>
				<!-- Ant thinks that ${os.arch} == i386 for x86_64, so use `uname` instead -->
				<exec executable="bash" outputproperty="arch">
					<arg line="getArch.sh" />
				</exec>
			</then>
			<else>
				<condition property="arch" value="x86_64" else="">
					<os arch="amd64" />
				</condition>
			</else>
		</if>
	</target>

	<!-- should work on osx-cocoa32, win32, lin32, lin64 -->
	<target name="get.eclipse">
		<!-- NOTE: must use same platform (50M) or SDK (103M - 168M) version as feature version on target platform, or will get install/update conflicts -->
		<property name="eclipse.version" value="3.7M5" />
		<property name="eclipse.URL" value="http://www.eclipse.org/downloads/download.php?r=1&amp;file=/eclipse/downloads/drops/S-3.7M5-201101272034"/>
		<!--
		<property name="eclipse.version" value="M20110105-0951" />
		<property name="eclipse.URL" value="http://www.eclipse.org/downloads/download.php?r=1&amp;file=/eclipse/downloads/drops/${eclipse.version}" />
		-->

		<if>
			<equals arg1="${arch}" arg2="x86" />
			<then>
				<property name="eclipse.file" value="eclipse-platform-${eclipse.version}-${os}.${ext}" />
			</then>
			<else>
				<property name="eclipse.file" value="eclipse-platform-${eclipse.version}-${os}-${arch}.${ext}" />
			</else>
		</if>

		<if>
			<not>
				<available file="${WORKINGDIR}/${eclipse.file}" type="file" />
			</not>
			<then>
				<get src="${eclipse.URL}/${eclipse.file}" dest="${WORKINGDIR}/${eclipse.file}" />
			</then>
		</if>

		<!-- purge previous eclipse install to avoid conflicts w/ Eclipse feature versions -->
		<delete dir="${WORKINGDIR}/eclipse-${eclipse.version}" includeemptydirs="true" quiet="true" />

		<untar compression="gzip" dest="${WORKINGDIR}/eclipse-${eclipse.version}" src="${WORKINGDIR}/${eclipse.file}" overwrite="true" />

		<!-- add 70M delta pack, eg. http://download.eclipse.org/eclipse/downloads/drops/M20101006-0936/download.php?dropFile=eclipse-M20101006-0936-delta-pack.zip -->
		<!-- ONLY need deltapack if using -Dtycho.targetPlatform, which is now depredated
		<property name="deltapack.file" value="eclipse-${eclipse.version}-delta-pack.zip"/>
		<if>
			<not>
				<available file="${WORKINGDIR}/${deltapack.file}" type="file" />
			</not>
			<then>
				<get src="${eclipse.URL}/${deltapack.file}" dest="${WORKINGDIR}/${deltapack.file}" />
			</then>
		</if>
		<unzip src="${WORKINGDIR}/${deltapack.file}" dest="${WORKINGDIR}" overwrite="true"/>
		-->

		<!-- make eclipse executable -->
		<chmod perm="+x" file="${WORKINGDIR}/eclipse-${eclipse.version}/eclipse/eclipse" />

	</target>

	<target name="gen.p2mirror.script" description="use XSLT to generate a p2.mirror script from .target">
		<ant antfile="target2p2mirror.xml" />
	</target>

	<!-- /abs/path/to/eclipse -vm /opt/jdk1.6.0/bin/java -nosplash -data /tmp/workspace -consolelog -application 
			org.eclipse.ant.core.antRunner -f *.target.p2mirror.xml -Ddebug=true -DfollowStrict=true -DrepoDir=/tmp/REPO/ -->
	<target name="run.p2mirror.script" description="build target update site using p2.mirror">
		<exec executable="${WORKINGDIR}/eclipse-${eclipse.version}/eclipse/eclipse" dir="${basedir}" failonerror="true">
			<arg line=" -nosplash -data ${tmpdir}/workspace -consolelog -application org.eclipse.ant.core.antRunner" />
			<arg line=" -f ${targetFile}.p2mirror.xml -DfollowStrict=true -DrepoDir=${repoDir}" />
			<arg line=" -Ddebug=true -vmargs -Dosgi.locking=none" />
		</exec>
	</target>

	<target name="update.target.file" description="use XSLT to update .target file from contents of local repo">
		<ant antfile="targetUpdateFromRepo.xml" />
	</target>

	<target name="cleanup">
		<delete dir="${tmpdir}" quiet="true" includeemptydirs="true" />
	</target>

	<target name="test.local.target.platform.repo" description="test target platform completeness by running a build against its update site">
		<exec executable="/opt/maven3/bin/mvn" dir="${WORKINGDIR}">
			<arg line=" -f ../parent/pom.xml clean install -B -U -fae -e -P helios-local-target,!helios -Dmaven.test.skip -Dtarget.platorm.URL=file://${repoDir}" />
		</exec>
		<exec executable="/opt/maven3/bin/mvn" dir="${WORKINGDIR}">
			<arg line=" -f ../pom.xml clean install -B -U -fae -e -P helios-local-target,!helios -Dmaven.test.skip -Dtarget.platorm.URL=file://${repoDir}" />
		</exec>
	</target>

	<target name="test.local.target.platform.installed.base" description="test target platform completeness by running a build against its installed eclipse base - Dtycho.targetPlatform to be removed in Tycho 0.11 so this test is deprecated">
		<!-- 
		<exec executable="/opt/maven3/bin/mvn" dir="${WORKINGDIR}">
			<arg line=" -f ../parent/pom.xml clean install -B -U -fae -e -P helios-local-target,!helios -Dmaven.test.skip -Dtarget.platorm.URL=file://${repoDir}" />
		</exec>
		<exec executable="/opt/maven3/bin/mvn" dir="${WORKINGDIR}">
			<arg line=" -f ../pom.xml clean install -B -U -fae -e -Dmaven.test.skip -Dtycho.targetPlatform=${WORKINGDIR}/eclipse" />
		</exec>
		-->
	</target>

	<target name="install.local.target.platform.repo" depends="init" description="use p2.director to install target platform into local eclipse">
		<!-- collect features to install -->
		<var name="install" value="" />
		<for param="featureJar">
			<path>
				<fileset dir="${repoDir}/features" includes="*.jar" />
			</path>
			<sequential>
				<var name="feature.jarfile" unset="true" />
				<var name="feature.id" unset="true" />
				<propertyregex property="feature.jarfile" defaultvalue="@{featureJar}" input="@{featureJar}" regexp=".+/features/([^/]+\.jar)" replace="\1" override="true" />
				<propertyregex property="feature.id" defaultvalue="${feature.jarfile}" input="${feature.jarfile}" regexp="([^_]+)_(\d+\.\d+\.\d+\..+)\.jar" replace="\1" override="true" />
				<propertyregex property="feature.id" defaultvalue="${feature.id}" input="${feature.id}" regexp="([^_]+)_(\d+\.\d+\.\d+)\.jar" replace="\1" override="true" />
				<var name="install" value="${install},${feature.id}.feature.group" />
				<var name="feature.jarfile" unset="true" />
				<var name="feature.id" unset="true" />
			</sequential>
		</for>
		<!-- trim prefix "," -->
		<propertyregex property="install" input="${install}" defaultvalue="${install}" regexp=",(.+)" replace="\1" override="true" />

		<!-- do install -->
		<antcall target="run.director">
			<param name="p2.director.installIU" value="${install}" />
			<param name="p2.director.install.path" value="${WORKINGDIR}/eclipse" />
			<param name="p2.director.input.repo" value="file://${repoDir}/" />
		</antcall>
	</target>

	<target name="run.director">
		<property name="p2.director.extraArgs" value="" />
		<property name="p2.director.installIU" value="${install}" />
		<property name="p2.director.install.path" value="${targetDir}" />
		<property name="p2.director.input.repo" value="jar:file://${sourceZip}!/" />
		<echo>
Source Repo(s): ${p2.director.input.repo}
Install Path: ${p2.director.install.path}
Feature(s) or Plugin(s) to Install:
${install}
 </echo>

		<mkdir dir="${p2.director.install.path}" />
		<chmod perm="+x" file="${p2.director.install.path}/eclipse" />
		<exec executable="${p2.director.install.path}/eclipse" failonerror="true" dir="${p2.director.install.path}" timeout="900000" taskname="p2.dir">
			<arg line=" -application org.eclipse.equinox.p2.director" />
			<arg line=" -nosplash" />
			<arg line=" --launcher.suppressErrors" />
			<arg line=" -consoleLog" />
			<arg line=" -flavor tooling" />
			<arg line=" -roaming" />
			<arg line=" -profile SDKProfile" />
			<arg line=" -destination ${p2.director.install.path}" />
			<arg line=" -bundlepool ${p2.director.install.path}" />
			<arg line=" -installIU ${p2.director.installIU}" />
			<arg line=" -metadataRepository ${p2.director.input.repo},file://${p2.director.install.path}/p2/org.eclipse.equinox.p2.engine/profileRegistry/SDKProfile.profile" />
			<arg line=" -artifactRepository ${p2.director.input.repo},file://${p2.director.install.path}" />
			<arg line=" -profileProperties org.eclipse.update.install.features=true" />
			<arg line=" -vmargs" />
			<arg line=" -Declipse.p2.data.area=${p2.director.install.path}/p2" />
			<arg line=" -Declipse.p2.MD5Check=false" />
		</exec>
	</target>
</project>
